function maxSubarraySum(nums) {
  // Initialize variables to keep track of the maximum sum and current sum
  let maxSum = nums[0]; // maximum sum is the first element initially
  let curSum = 0; // Initialize current sum to 0

  // Iterate through each number in the array
  for (let i = 0; i < nums.length; i++) {
    const currentNumber = nums[i];

    // if the current sum becomes negative, reset it 0
    curSum = Math.max(curSum, 0);

    // Add the current number to the current sum
    curSum += currentNumber;

    // Update the maximum sum if the current sum is greater
    maxSum = Math.max(maxSum, curSum);
  }

  // The maximum sum has been found after iterating through the entire array
  return maxSum;
}

// Example usage:
const inputArray = [1, 2, -3, 4, -1, 2, 1, -5, 4];
const result = maxSubarraySum(inputArray);
console.log(result); // Output: 6


Thouht and logic process:

I started by Initializing two variables maxSum and curSum.
The maxSum will keep track of the overall maximum subarray sum
The curSum will keep track of the current subarray as we iterate through the array

I used a for loop to iterate each number in the array one by one
while  in the loop, before adding the current number to the sum, we check if the currrent sum is negative. If it is we reset the curent sum to the current number as negative sum won't help us find the maximum subarray sum.
We update the current sum, We add the current number to the current sum. This step considers whether it's beneficial to continue the current subarray or start a new one.
After updating the current sum, we check if it has become greater than the current maximum sum. If it is, we update the maximum sum
These steps are repeated for each number in the array, while ensuring that we keep track of the maximum subarray sum encountered so far.
After iterating through the entire array, we return the maximum sum, which represents the highest sum of a subarray within the given array.